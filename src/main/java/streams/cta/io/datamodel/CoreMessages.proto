syntax="proto2";

package streams.cta.io.datamodel;

/** @file CoreMessages.proto
 * 	Protobuffer messages used by the core of the framework only
 */

 message ThroughputStats
 {
 	optional string origin     = 1; // hostname or ip of the sending node
 	optional int32  port       = 2; // port used for the connection, if any
 	optional string dest       = 3; // component name of the receiving node
 	optional int32  num_bytes  = 4; // number of transfered bytes
 	optional int32  elapsed_us = 5; // time elapsed since last update
 	optional string comment    = 6; // any text to be displayed with the node
 }

/*
 * Dispatch the identify of the data servers
 */
 message ServerAnnouncement
 {
 	optional string name = 1; //component name related to this server 
 	optional string host = 2; //hostname for resolving the source of the stats received by the client(s)
 	optional int32  port = 3; //port used for the connection, if any
 }

/*
 * Enum containing the possible types transported inside a CTAMessage. New message types should be registered here
 */
enum MessageType
{
	EMPTY_MESSAGE       = -2;
	END_OF_STREAM       = -1;
	NO_TYPE             = 0;
	ANY_ARRAY           = 1;
	WAVEFORM_DATA       = 2;
	INTEGRAL_DATA       = 3;
	PIXELS_CHANNEL      = 4;
	CAMERA_TRIGGER      = 5;
	ARRAY_TRIGGER       = 6;
	CAMERA_RUN_HEADER   = 7;
	CAMERA_EVENT        = 8;
	ARRAY_EVENT         = 9;
	THROUGHPUT_STATS    = 10;
	SERVER_ANNOUNCEMENT = 11;
	MESSAGE_WRAPPER     = 12;
	RAW_CAMERA_DATA     = 13;
	PACKETLIB_DATA     = 14;
}

/**********************
 *  Message message: wrapper to send other message through the network
 *  TODO implement (in the streamer class) the actual handling of more than one item per message
 */
message CTAMessage {
  repeated MessageType payload_type  = 1;              //type of the message contained in the payload
  optional string      source_name   = 2 [default=""]; //name of the originating node. Useful to create appropriately named outputs (files...)
  optional sfixed32    message_count = 3 [default=-1];
  repeated bytes       payload_data  = 4; 		       //actual payload data
}

/**************
 * Low level arrays, to store any kind of non-formatted data
 *
 */
message AnyArray
{
   enum ItemType
   {
       NONE   = 0;
       S8     = 1;
       U8     = 2;
       S16    = 3;
       U16    = 4;
       S32    = 5;
       U32    = 6;
       S64    = 7;
       U64    = 8;
       FLOAT  = 9;
       DOUBLE = 10;
       BOOL   = 11;
   }

   enum CompType
   {
       RAW     = 0;
       ZLIB    = 1;
       LZO     = 2;
       RICE    = 3;
       ZRICE   = 4;
       LZORICE = 5;
   }

   optional ItemType type         = 1 [default=NONE];
   optional CompType current_comp = 2 [default=RAW];
   optional CompType desired_comp = 3 [default=RAW];
   optional bytes    data         = 4;
}

